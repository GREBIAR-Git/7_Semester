
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001015  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b04  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000576  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059a  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005de  00000000  00000000  00002b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	27 c0       	rjmp	.+78     	; 0xdc <__bad_interrupt>
  8e:	00 00       	nop
  90:	25 c0       	rjmp	.+74     	; 0xdc <__bad_interrupt>
  92:	00 00       	nop
  94:	23 c0       	rjmp	.+70     	; 0xdc <__bad_interrupt>
  96:	00 00       	nop
  98:	21 c0       	rjmp	.+66     	; 0xdc <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1f c0       	rjmp	.+62     	; 0xdc <__bad_interrupt>
  9e:	00 00       	nop
  a0:	1d c0       	rjmp	.+58     	; 0xdc <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1b c0       	rjmp	.+54     	; 0xdc <__bad_interrupt>
  a6:	00 00       	nop
  a8:	19 c0       	rjmp	.+50     	; 0xdc <__bad_interrupt>
  aa:	00 00       	nop
  ac:	17 c0       	rjmp	.+46     	; 0xdc <__bad_interrupt>
  ae:	00 00       	nop
  b0:	15 c0       	rjmp	.+42     	; 0xdc <__bad_interrupt>
  b2:	00 00       	nop
  b4:	13 c0       	rjmp	.+38     	; 0xdc <__bad_interrupt>
  b6:	00 00       	nop
  b8:	11 c0       	rjmp	.+34     	; 0xdc <__bad_interrupt>
  ba:	00 00       	nop
  bc:	0f c0       	rjmp	.+30     	; 0xdc <__bad_interrupt>
  be:	00 00       	nop
  c0:	0d c0       	rjmp	.+26     	; 0xdc <__bad_interrupt>
  c2:	00 00       	nop
  c4:	0b c0       	rjmp	.+22     	; 0xdc <__bad_interrupt>
  c6:	00 00       	nop
  c8:	09 c0       	rjmp	.+18     	; 0xdc <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	d3 d0       	rcall	.+422    	; 0x280 <main>
  da:	0c c1       	rjmp	.+536    	; 0x2f4 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <Delay>:
void nextSpeed(int* speed)
{
	(*speed) = (*speed) + 1;
	if ((*speed) == 4)
	{
		(*speed) = 1;
  de:	fc 01       	movw	r30, r24
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	51 f4       	brne	.+20     	; 0xfe <Delay+0x20>
  ea:	ff e7       	ldi	r31, 0x7F	; 127
  ec:	28 e3       	ldi	r18, 0x38	; 56
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	f1 50       	subi	r31, 0x01	; 1
  f2:	20 40       	sbci	r18, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <Delay+0x12>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <Delay+0x1c>
  fa:	00 00       	nop
  fc:	08 95       	ret
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	91 05       	cpc	r25, r1
 102:	39 f4       	brne	.+14     	; 0x112 <Delay+0x34>
 104:	ef e4       	ldi	r30, 0x4F	; 79
 106:	f3 ec       	ldi	r31, 0xC3	; 195
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <Delay+0x2a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <Delay+0x30>
 10e:	00 00       	nop
 110:	08 95       	ret
 112:	03 97       	sbiw	r24, 0x03	; 3
 114:	31 f4       	brne	.+12     	; 0x122 <Delay+0x44>
 116:	87 ea       	ldi	r24, 0xA7	; 167
 118:	91 e6       	ldi	r25, 0x61	; 97
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <Delay+0x3c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <Delay+0x42>
 120:	00 00       	nop
 122:	08 95       	ret

00000124 <onORoff_Click>:
 124:	18 9b       	sbis	0x03, 0	; 3
 126:	0b c0       	rjmp	.+22     	; 0x13e <onORoff_Click+0x1a>
 128:	fc 01       	movw	r30, r24
 12a:	20 81       	ld	r18, Z
 12c:	21 11       	cpse	r18, r1
 12e:	09 c0       	rjmp	.+18     	; 0x142 <onORoff_Click+0x1e>
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	20 83       	st	Z, r18
 134:	fb 01       	movw	r30, r22
 136:	80 81       	ld	r24, Z
 138:	28 27       	eor	r18, r24
 13a:	20 83       	st	Z, r18
 13c:	08 95       	ret
 13e:	fc 01       	movw	r30, r24
 140:	10 82       	st	Z, r1
 142:	08 95       	ret

00000144 <but1>:
 144:	ef cf       	rjmp	.-34     	; 0x124 <onORoff_Click>
 146:	08 95       	ret

00000148 <nextMode>:
 148:	fc 01       	movw	r30, r24
 14a:	20 81       	ld	r18, Z
 14c:	31 81       	ldd	r19, Z+1	; 0x01
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	31 83       	std	Z+1, r19	; 0x01
 154:	20 83       	st	Z, r18
 156:	24 30       	cpi	r18, 0x04	; 4
 158:	31 05       	cpc	r19, r1
 15a:	21 f4       	brne	.+8      	; 0x164 <nextMode+0x1c>
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	91 83       	std	Z+1, r25	; 0x01
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <mode_Click>:
 166:	19 9b       	sbis	0x03, 1	; 3
 168:	09 c0       	rjmp	.+18     	; 0x17c <mode_Click+0x16>
 16a:	fc 01       	movw	r30, r24
 16c:	20 81       	ld	r18, Z
 16e:	21 11       	cpse	r18, r1
 170:	07 c0       	rjmp	.+14     	; 0x180 <mode_Click+0x1a>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 83       	st	Z, r24
 176:	cb 01       	movw	r24, r22
 178:	e7 cf       	rjmp	.-50     	; 0x148 <nextMode>
 17a:	08 95       	ret
 17c:	fc 01       	movw	r30, r24
 17e:	10 82       	st	Z, r1
 180:	08 95       	ret

00000182 <but2>:
 182:	f1 cf       	rjmp	.-30     	; 0x166 <mode_Click>
 184:	08 95       	ret

00000186 <speed_Click>:
 186:	1a 9b       	sbis	0x03, 2	; 3
 188:	09 c0       	rjmp	.+18     	; 0x19c <speed_Click+0x16>
 18a:	fc 01       	movw	r30, r24
 18c:	20 81       	ld	r18, Z
 18e:	21 11       	cpse	r18, r1
 190:	07 c0       	rjmp	.+14     	; 0x1a0 <speed_Click+0x1a>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 83       	st	Z, r24
 196:	cb 01       	movw	r24, r22
 198:	d7 cf       	rjmp	.-82     	; 0x148 <nextMode>
 19a:	08 95       	ret
 19c:	fc 01       	movw	r30, r24
 19e:	10 82       	st	Z, r1
 1a0:	08 95       	ret

000001a2 <but3>:
 1a2:	f1 cf       	rjmp	.-30     	; 0x186 <speed_Click>
 1a4:	08 95       	ret

000001a6 <nextStep>:
	}
}

void nextStep(int* step)
{
 1a6:	fc 01       	movw	r30, r24
	(*step) = (*step) + 1;
 1a8:	20 81       	ld	r18, Z
 1aa:	31 81       	ldd	r19, Z+1	; 0x01
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	31 83       	std	Z+1, r19	; 0x01
 1b2:	20 83       	st	Z, r18
	if ((*step) == 4)
 1b4:	24 30       	cpi	r18, 0x04	; 4
 1b6:	31 05       	cpc	r19, r1
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <nextStep+0x1c>
	{
		(*step) = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	91 83       	std	Z+1, r25	; 0x01
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <result>:
	}
}

void result(int* mode, int* step)
{
	if ((*mode) == 1)
 1c4:	fc 01       	movw	r30, r24
 1c6:	80 81       	ld	r24, Z
 1c8:	91 81       	ldd	r25, Z+1	; 0x01
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	a1 f4       	brne	.+40     	; 0x1f8 <result+0x34>
	{
		if ((*step) == 1)
 1d0:	fb 01       	movw	r30, r22
 1d2:	80 81       	ld	r24, Z
 1d4:	91 81       	ldd	r25, Z+1	; 0x01
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 05       	cpc	r25, r1
 1da:	19 f4       	brne	.+6      	; 0x1e2 <result+0x1e>
		{
			PORTD = 0b00000001;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	08 95       	ret
		}
		else if ((*step) == 2)
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	91 05       	cpc	r25, r1
 1e6:	19 f4       	brne	.+6      	; 0x1ee <result+0x2a>
		{
			PORTD = 0b00000010;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	8b b9       	out	0x0b, r24	; 11
 1ec:	08 95       	ret
		}
		else if ((*step) == 3)
 1ee:	03 97       	sbiw	r24, 0x03	; 3
 1f0:	71 f5       	brne	.+92     	; 0x24e <result+0x8a>
		{
			PORTD = 0b00000100;
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	08 95       	ret
		}
	}
	else if ((*mode) == 2)
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	91 05       	cpc	r25, r1
 1fc:	99 f4       	brne	.+38     	; 0x224 <result+0x60>
	{
		if ((*step) == 1)
 1fe:	fb 01       	movw	r30, r22
 200:	80 81       	ld	r24, Z
 202:	91 81       	ldd	r25, Z+1	; 0x01
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	91 05       	cpc	r25, r1
 208:	19 f4       	brne	.+6      	; 0x210 <result+0x4c>
		{
			PORTD = 0b00000111;
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	8b b9       	out	0x0b, r24	; 11
 20e:	08 95       	ret
		}
		else if ((*step) == 2)
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	91 05       	cpc	r25, r1
 214:	11 f4       	brne	.+4      	; 0x21a <result+0x56>
		{
			PORTD = 0b00000000;
 216:	1b b8       	out	0x0b, r1	; 11
 218:	08 95       	ret
		}
		else if ((*step) == 3)
 21a:	03 97       	sbiw	r24, 0x03	; 3
 21c:	c1 f4       	brne	.+48     	; 0x24e <result+0x8a>
		{
			PORTD = 0b00000010;
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	8b b9       	out	0x0b, r24	; 11
 222:	08 95       	ret
		}
	}
	else if ((*mode) == 3)
 224:	03 97       	sbiw	r24, 0x03	; 3
 226:	99 f4       	brne	.+38     	; 0x24e <result+0x8a>
	{
		if ((*step) == 1)
 228:	fb 01       	movw	r30, r22
 22a:	80 81       	ld	r24, Z
 22c:	91 81       	ldd	r25, Z+1	; 0x01
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	91 05       	cpc	r25, r1
 232:	19 f4       	brne	.+6      	; 0x23a <result+0x76>
		{
			PORTD = 0b00000111;
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	8b b9       	out	0x0b, r24	; 11
 238:	08 95       	ret
		}
		else if ((*step) == 2)
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	91 05       	cpc	r25, r1
 23e:	19 f4       	brne	.+6      	; 0x246 <result+0x82>
		{
			PORTD = 0b00000111;
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	8b b9       	out	0x0b, r24	; 11
 244:	08 95       	ret
		}
		else if ((*step) == 3)
 246:	03 97       	sbiw	r24, 0x03	; 3
 248:	11 f4       	brne	.+4      	; 0x24e <result+0x8a>
		{
			PORTD = 0b00000111;
 24a:	87 e0       	ldi	r24, 0x07	; 7
 24c:	8b b9       	out	0x0b, r24	; 11
 24e:	08 95       	ret

00000250 <light>:
		light(&on, &mode, &step, &speed);
	}
}

void light(bool* on, int* mode, int* step, int* speed)
{
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
	if (*on)
 258:	fc 01       	movw	r30, r24
 25a:	90 81       	ld	r25, Z
 25c:	99 23       	and	r25, r25
 25e:	51 f0       	breq	.+20     	; 0x274 <light+0x24>
 260:	89 01       	movw	r16, r18
 262:	ea 01       	movw	r28, r20
 264:	cb 01       	movw	r24, r22
	{
		result(mode, step);
 266:	ba 01       	movw	r22, r20
 268:	ad df       	rcall	.-166    	; 0x1c4 <result>
		Delay(speed);
 26a:	c8 01       	movw	r24, r16
 26c:	38 df       	rcall	.-400    	; 0xde <Delay>
		nextStep(step);
 26e:	ce 01       	movw	r24, r28
 270:	9a df       	rcall	.-204    	; 0x1a6 <nextStep>
 272:	01 c0       	rjmp	.+2      	; 0x276 <light+0x26>
 274:	1b b8       	out	0x0b, r1	; 11
	}
	else
	{
		PORTD = 0;
 276:	df 91       	pop	r29
	}
}
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <main>:
 280:	cf 93       	push	r28
void nextSpeed(int* speed);
void speed_Click(bool* flagSpeed, int* speed);
void Delay(int* speed);

int main(void)
{
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	2a 97       	sbiw	r28, 0x0a	; 10
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b00000111; // 0x
 294:	87 e0       	ldi	r24, 0x07	; 7
 296:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0; // 0x
 298:	14 b8       	out	0x04, r1	; 4
	PORTB = 0; // 0b
 29a:	15 b8       	out	0x05, r1	; 5
	PORTD = 0b00000111; // 0b
 29c:	8b b9       	out	0x0b, r24	; 11
	bool on=false;
 29e:	19 82       	std	Y+1, r1	; 0x01
	bool flagOnOff = false;
 2a0:	1a 82       	std	Y+2, r1	; 0x02
	bool flagMode = false;
 2a2:	1b 82       	std	Y+3, r1	; 0x03
	bool flagSpeed = false; 
 2a4:	1c 82       	std	Y+4, r1	; 0x04
	int mode = 1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9e 83       	std	Y+6, r25	; 0x06
 2ac:	8d 83       	std	Y+5, r24	; 0x05
	int step = 1;
 2ae:	98 87       	std	Y+8, r25	; 0x08
 2b0:	8f 83       	std	Y+7, r24	; 0x07
	int speed = 1;
 2b2:	9a 87       	std	Y+10, r25	; 0x0a
 2b4:	89 87       	std	Y+9, r24	; 0x09
	while (1)
	{
		but1(&flagOnOff,&on);
 2b6:	be 01       	movw	r22, r28
 2b8:	6f 5f       	subi	r22, 0xFF	; 255
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	ce 01       	movw	r24, r28
 2be:	02 96       	adiw	r24, 0x02	; 2
 2c0:	41 df       	rcall	.-382    	; 0x144 <but1>
		but2(&flagMode, &mode);
 2c2:	be 01       	movw	r22, r28
 2c4:	6b 5f       	subi	r22, 0xFB	; 251
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	ce 01       	movw	r24, r28
 2ca:	03 96       	adiw	r24, 0x03	; 3
 2cc:	5a df       	rcall	.-332    	; 0x182 <but2>
		but3(&flagSpeed,&speed);
 2ce:	be 01       	movw	r22, r28
 2d0:	67 5f       	subi	r22, 0xF7	; 247
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255
 2d4:	ce 01       	movw	r24, r28
 2d6:	04 96       	adiw	r24, 0x04	; 4
 2d8:	64 df       	rcall	.-312    	; 0x1a2 <but3>
		light(&on, &mode, &step, &speed);
 2da:	9e 01       	movw	r18, r28
 2dc:	27 5f       	subi	r18, 0xF7	; 247
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	ae 01       	movw	r20, r28
 2e2:	49 5f       	subi	r20, 0xF9	; 249
 2e4:	5f 4f       	sbci	r21, 0xFF	; 255
 2e6:	be 01       	movw	r22, r28
 2e8:	6b 5f       	subi	r22, 0xFB	; 251
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	af df       	rcall	.-162    	; 0x250 <light>
 2f2:	e1 cf       	rjmp	.-62     	; 0x2b6 <main+0x36>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
