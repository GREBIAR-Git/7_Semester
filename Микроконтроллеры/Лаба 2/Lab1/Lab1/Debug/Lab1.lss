
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800206  00800206  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107f  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0a  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000577  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  0000261c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007dc  00000000  00000000  00002dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	93 c0       	rjmp	.+294    	; 0x12c <__vector_1>
   6:	00 00       	nop
   8:	db c0       	rjmp	.+438    	; 0x1c0 <__vector_2>
   a:	00 00       	nop
   c:	14 c1       	rjmp	.+552    	; 0x236 <__vector_3>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e8 e7       	ldi	r30, 0x78	; 120
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a6 30       	cpi	r26, 0x06	; 6
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	a6 e0       	ldi	r26, 0x06	; 6
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a9 30       	cpi	r26, 0x09	; 9
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	2a d1       	rcall	.+596    	; 0x358 <main>
 104:	37 c1       	rjmp	.+622    	; 0x374 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <onORoff_Click>:
void nextSpeed(int* speed)
{
	(*speed) = (*speed) + 1;
	if ((*speed) == 4)
	{
		(*speed) = 1;
 108:	18 9b       	sbis	0x03, 0	; 3
 10a:	0b c0       	rjmp	.+22     	; 0x122 <onORoff_Click+0x1a>
 10c:	fc 01       	movw	r30, r24
 10e:	20 81       	ld	r18, Z
 110:	21 11       	cpse	r18, r1
 112:	09 c0       	rjmp	.+18     	; 0x126 <onORoff_Click+0x1e>
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	20 83       	st	Z, r18
 118:	fb 01       	movw	r30, r22
 11a:	80 81       	ld	r24, Z
 11c:	28 27       	eor	r18, r24
 11e:	20 83       	st	Z, r18
 120:	08 95       	ret
 122:	fc 01       	movw	r30, r24
 124:	10 82       	st	Z, r1
 126:	08 95       	ret

00000128 <but1>:
 128:	ef cf       	rjmp	.-34     	; 0x108 <onORoff_Click>
 12a:	08 95       	ret

0000012c <__vector_1>:
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	0b b6       	in	r0, 0x3b	; 59
 138:	0f 92       	push	r0
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
 152:	68 e0       	ldi	r22, 0x08	; 8
 154:	72 e0       	ldi	r23, 0x02	; 2
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	e6 df       	rcall	.-52     	; 0x128 <but1>
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0b be       	out	0x3b, r0	; 59
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <nextMode>:
 182:	fc 01       	movw	r30, r24
 184:	20 81       	ld	r18, Z
 186:	31 81       	ldd	r19, Z+1	; 0x01
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	31 83       	std	Z+1, r19	; 0x01
 18e:	20 83       	st	Z, r18
 190:	24 30       	cpi	r18, 0x04	; 4
 192:	31 05       	cpc	r19, r1
 194:	21 f4       	brne	.+8      	; 0x19e <nextMode+0x1c>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	91 83       	std	Z+1, r25	; 0x01
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <mode_Click>:
 1a0:	19 9b       	sbis	0x03, 1	; 3
 1a2:	09 c0       	rjmp	.+18     	; 0x1b6 <mode_Click+0x16>
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 81       	ld	r18, Z
 1a8:	21 11       	cpse	r18, r1
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <mode_Click+0x1a>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 83       	st	Z, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	e7 cf       	rjmp	.-50     	; 0x182 <nextMode>
 1b4:	08 95       	ret
 1b6:	fc 01       	movw	r30, r24
 1b8:	10 82       	st	Z, r1
 1ba:	08 95       	ret

000001bc <but2>:
 1bc:	f1 cf       	rjmp	.-30     	; 0x1a0 <mode_Click>
 1be:	08 95       	ret

000001c0 <__vector_2>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	0b b6       	in	r0, 0x3b	; 59
 1cc:	0f 92       	push	r0
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	72 e0       	ldi	r23, 0x02	; 2
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	e6 df       	rcall	.-52     	; 0x1bc <but2>
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0b be       	out	0x3b, r0	; 59
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <speed_Click>:
 216:	1a 9b       	sbis	0x03, 2	; 3
 218:	09 c0       	rjmp	.+18     	; 0x22c <speed_Click+0x16>
 21a:	fc 01       	movw	r30, r24
 21c:	20 81       	ld	r18, Z
 21e:	21 11       	cpse	r18, r1
 220:	07 c0       	rjmp	.+14     	; 0x230 <speed_Click+0x1a>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 83       	st	Z, r24
 226:	cb 01       	movw	r24, r22
 228:	ac cf       	rjmp	.-168    	; 0x182 <nextMode>
 22a:	08 95       	ret
 22c:	fc 01       	movw	r30, r24
 22e:	10 82       	st	Z, r1
 230:	08 95       	ret

00000232 <but3>:
 232:	f1 cf       	rjmp	.-30     	; 0x216 <speed_Click>
 234:	08 95       	ret

00000236 <__vector_3>:
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	0b b6       	in	r0, 0x3b	; 59
 242:	0f 92       	push	r0
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	72 e0       	ldi	r23, 0x02	; 2
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	e6 df       	rcall	.-52     	; 0x232 <but3>
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0b be       	out	0x3b, r0	; 59
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <nextStep>:
	}
}

void nextStep(int* step)
{
 28c:	fc 01       	movw	r30, r24
	(*step) = (*step) + 1;
 28e:	20 81       	ld	r18, Z
 290:	31 81       	ldd	r19, Z+1	; 0x01
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	31 83       	std	Z+1, r19	; 0x01
 298:	20 83       	st	Z, r18
	if ((*step) == 4)
 29a:	24 30       	cpi	r18, 0x04	; 4
 29c:	31 05       	cpc	r19, r1
 29e:	21 f4       	brne	.+8      	; 0x2a8 <nextStep+0x1c>
	{
		(*step) = 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	91 83       	std	Z+1, r25	; 0x01
 2a6:	80 83       	st	Z, r24
 2a8:	08 95       	ret

000002aa <result>:
	}
}

void result(int* mode, int* step)
{
	if ((*mode) == 1)
 2aa:	fc 01       	movw	r30, r24
 2ac:	80 81       	ld	r24, Z
 2ae:	91 81       	ldd	r25, Z+1	; 0x01
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	91 05       	cpc	r25, r1
 2b4:	a1 f4       	brne	.+40     	; 0x2de <result+0x34>
	{
		if ((*step) == 1)
 2b6:	fb 01       	movw	r30, r22
 2b8:	80 81       	ld	r24, Z
 2ba:	91 81       	ldd	r25, Z+1	; 0x01
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	91 05       	cpc	r25, r1
 2c0:	19 f4       	brne	.+6      	; 0x2c8 <result+0x1e>
		{
			PORTB = 0b00000001;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	85 b9       	out	0x05, r24	; 5
 2c6:	08 95       	ret
		}
		else if ((*step) == 2)
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	91 05       	cpc	r25, r1
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <result+0x2a>
		{
			PORTB = 0b00000010;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	85 b9       	out	0x05, r24	; 5
 2d2:	08 95       	ret
		}
		else if ((*step) == 3)
 2d4:	03 97       	sbiw	r24, 0x03	; 3
 2d6:	71 f5       	brne	.+92     	; 0x334 <result+0x8a>
		{
			PORTB = 0b00000100;
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	85 b9       	out	0x05, r24	; 5
 2dc:	08 95       	ret
		}
	}
	else if ((*mode) == 2)
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	91 05       	cpc	r25, r1
 2e2:	99 f4       	brne	.+38     	; 0x30a <result+0x60>
	{
		if ((*step) == 1)
 2e4:	fb 01       	movw	r30, r22
 2e6:	80 81       	ld	r24, Z
 2e8:	91 81       	ldd	r25, Z+1	; 0x01
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	91 05       	cpc	r25, r1
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <result+0x4c>
		{
			PORTB = 0b00000111;
 2f0:	87 e0       	ldi	r24, 0x07	; 7
 2f2:	85 b9       	out	0x05, r24	; 5
 2f4:	08 95       	ret
		}
		else if ((*step) == 2)
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <result+0x56>
		{
			PORTB = 0b00000000;
 2fc:	15 b8       	out	0x05, r1	; 5
 2fe:	08 95       	ret
		}
		else if ((*step) == 3)
 300:	03 97       	sbiw	r24, 0x03	; 3
 302:	c1 f4       	brne	.+48     	; 0x334 <result+0x8a>
		{
			PORTB = 0b00000010;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	85 b9       	out	0x05, r24	; 5
 308:	08 95       	ret
		}
	}
	else if ((*mode) == 3)
 30a:	03 97       	sbiw	r24, 0x03	; 3
 30c:	99 f4       	brne	.+38     	; 0x334 <result+0x8a>
	{
		if ((*step) == 1)
 30e:	fb 01       	movw	r30, r22
 310:	80 81       	ld	r24, Z
 312:	91 81       	ldd	r25, Z+1	; 0x01
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	91 05       	cpc	r25, r1
 318:	19 f4       	brne	.+6      	; 0x320 <result+0x76>
		{
			PORTB = 0b00000111;
 31a:	87 e0       	ldi	r24, 0x07	; 7
 31c:	85 b9       	out	0x05, r24	; 5
 31e:	08 95       	ret
		}
		else if ((*step) == 2)
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	91 05       	cpc	r25, r1
 324:	19 f4       	brne	.+6      	; 0x32c <result+0x82>
		{
			PORTB = 0b00000111;
 326:	87 e0       	ldi	r24, 0x07	; 7
 328:	85 b9       	out	0x05, r24	; 5
 32a:	08 95       	ret
		}
		else if ((*step) == 3)
 32c:	03 97       	sbiw	r24, 0x03	; 3
 32e:	11 f4       	brne	.+4      	; 0x334 <result+0x8a>
		{
			PORTB = 0b00000111;
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	85 b9       	out	0x05, r24	; 5
 334:	08 95       	ret

00000336 <light>:
	
	but3(&flagSpeed,&speed);
}

void light(bool* on, int* mode, int* step, int* speed)
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
	if (*on)
 33a:	fc 01       	movw	r30, r24
 33c:	90 81       	ld	r25, Z
 33e:	99 23       	and	r25, r25
 340:	39 f0       	breq	.+14     	; 0x350 <light+0x1a>
 342:	ea 01       	movw	r28, r20
 344:	cb 01       	movw	r24, r22
	{
		result(mode, step);
 346:	ba 01       	movw	r22, r20
 348:	b0 df       	rcall	.-160    	; 0x2aa <result>
		//Delay(speed);
		nextStep(step);
 34a:	ce 01       	movw	r24, r28
 34c:	9f df       	rcall	.-194    	; 0x28c <nextStep>
 34e:	01 c0       	rjmp	.+2      	; 0x352 <light+0x1c>
	}
	else
	{
		PORTB = 0;
 350:	15 b8       	out	0x05, r1	; 5
	}
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <main>:
int step = 1;
int speed = 1;

int main(void)
{
	DDRD = 0; // 0x
 358:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0b00000111; // 0x
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	84 b9       	out	0x04, r24	; 4
	

	sei();
 35e:	78 94       	sei

	while (1)
	{
		light(&on, &mode, &step, &speed);
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	32 e0       	ldi	r19, 0x02	; 2
 364:	42 e0       	ldi	r20, 0x02	; 2
 366:	52 e0       	ldi	r21, 0x02	; 2
 368:	64 e0       	ldi	r22, 0x04	; 4
 36a:	72 e0       	ldi	r23, 0x02	; 2
 36c:	88 e0       	ldi	r24, 0x08	; 8
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	e2 df       	rcall	.-60     	; 0x336 <light>
 372:	f6 cf       	rjmp	.-20     	; 0x360 <main+0x8>

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
